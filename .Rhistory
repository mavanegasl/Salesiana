install.packages("rsm")
library(rsm)
low_levels <- rep(0, num_compounds)
low_levels <- rep(0, 15)
high_levels <- rep(1, 15)
# Diseño de superficie de respuesta usando un diseño central compuesto
rsm_design <- ccd.lhs(n = 15, nfactors = 2, ncenters = 1, alpha = "rotatable", low = low_levels, high = high_levels)
# Diseño de superficie de respuesta usando un diseño central compuesto
rsm_design <- ccd(n = 15, nfactors = 2, ncenters = 1, alpha = "rotatable", low = low_levels, high = high_levels)
# Diseño de superficie de respuesta usando un diseño central compuesto
rsm_design <- ccd(n = 15, nfactors = 2, alpha = "rotatable", center = TRUE)
# Diseño de superficie de respuesta usando un diseño central compuesto
rsm_design <- ccd(n = 15, nfact = num_factors, alpha = "rotatable")
# Diseño de superficie de respuesta usando un diseño central compuesto
rsm_design <- ccd(n = 15, num_factors, alpha = "rotatable")
# Número de factores, (Solventes)
num_factors <- 2
# Diseño de superficie de respuesta usando un diseño central compuesto
rsm_design <- ccd(n = 15, num_factors, alpha = "rotatable")
# Agregar etiquetas a las columnas para identificar los solventes acuosos y orgánicos
colnames(rsm_design) <- c("Solvente Acuoso", "Solvente Orgánico")
# Agregar etiquetas a las columnas para identificar los solventes acuosos y orgánicos
colnames(rsm_design) <- c("Solvente Acuoso", "Solvente Orgánico")
# Agregar etiquetas a las columnas para identificar los solventes acuosos y orgánicos
colnames(rsm_design$design) <- c("Solvente Acuoso", "Solvente Orgánico")
# Agregar etiquetas a las columnas para identificar los solventes acuosos y orgánicos
names(rsm_design$coefficients) <- c("Solvente Acuoso", "Solvente Orgánico")
# Agregar etiquetas a las columnas para identificar los solventes acuosos y orgánicos
view(rsm_design)
# Agregar etiquetas a las columnas para identificar los solventes acuosos y orgánicos
view(rsm_design)
# Agregar etiquetas a las columnas para identificar los solventes acuosos y orgánicos
View(rsm_design)
names(rsm_design$coefficients) <- c("Solvente Acuoso", "Solvente Orgánico")
colnames(rsm_design) <- c("Solvente Acuoso", "Solvente Orgánico")
# Carga de la librería para generar el diseño de experimentos
install.packages("AlgDesign")
library(AlgDesign)
# Definir el número de factores, que en este caso son los solventes acuosos y orgánicos
num_factors <- 2
# Diseño de superficie de respuesta usando un diseño central compuesto con el paquete AlgDesign
ccd_design <- ccd.pickcont(n = num_compounds, nfactors = num_factors, ncenter = 1, alpha = "rotatable")
# Diseño de superficie de respuesta usando un diseño central compuesto con el paquete AlgDesign
ccd_design <- ccd.design(n = 15, nfactors = num_factors, alpha = "rotatable")
# Diseño de superficie de respuesta usando un diseño central compuesto con el paquete AlgDesign
ccd_design <- ccd.pick(nfactors = num_factors, ncenter = 1)
# Diseño de superficie de respuesta usando un diseño central compuesto con el paquete AlgDesign
ccd_design <- ccd.design(nfactors = num_factors, ncenter = 1)
# Instalar el paquete DoE.wrapper si aún no lo tienes
install.packages("DoE.wrapper")
# Cargar el paquete
library(DoE.wrapper)
# Definir el número de factores, que en este caso son los solventes acuosos y orgánicos
num_factors <- 2
# Diseño central compuesto (DCC) usando la función ccd.design del paquete DoE.wrapper
dcc_design <- ccd.design(nfactors = num_factors, ncenter = 1)
# Agregar etiquetas a las columnas para identificar los solventes acuosos y orgánicos
colnames(dcc_design) <- c("Solvente Acuoso", "Solvente Orgánico")
# Visualización del diseño generado
print(dcc_design)
scaled_design <- dcc_design * 100
# Agregar etiquetas a las columnas para identificar los solventes acuosos y orgánicos
colnames(dcc_design) <- c("Solvente Acuoso", "Solvente Orgánico")
# Visualización del diseño generado
print(dcc_design)
# Diseño central compuesto (DCC) usando la función ccd.design del paquete DoE.wrapper
dcc_design <- ccd.design(nfactors = num_factors, ncenter = 1)
# Escalar los valores al rango de 0 a 100 para representar porcentaje
scaled_design <- (dcc_design + 1) * 50
# Agregar etiquetas a las columnas para identificar los solventes acuosos y orgánicos
colnames(scaled_design) <- c("Solvente Acuoso (%)", "Solvente Orgánico (%)")
# Visualización del diseño generado en porcentaje
print(scaled_design)
View(scaled_design)
# Carga de la librería para generar el diseño de experimentos
install.packages("rsm")
install.packages("rsm")
library(rsm)
# Definir el número de factores, que en este caso son los solventes acuosos y orgánicos
num_factors <- 2
num_compounds<-15
# Diseño de mezclas simplex usando un diseño simplex centrado
simplex_design <- mix.design(n = num_compounds, nTrials = 1, ncenter = 1)
# Diseño de mezclas simplex usando un diseño simplex centrado
simplex_design <- mix.design(n = num_compounds, nTrials = 1, ncenter = 1)
# Carga de la librería para generar el diseño de mezclas
install.packages("lhs")
library(lhs)
# Definir el número de factores, que en este caso son los solventes acuosos y orgánicos
num_factors <- 2
# Número de puntos en el diseño de mezclas (ajústalo según tus necesidades)
num_points <- 15
# Generar el diseño de mezclas usando Latin Hypercube Sampling (LHS)
lhs_design <- lhs(n = num_points, k = num_factors)
# Generar el diseño de mezclas usando Latin Hypercube Sampling (LHS)
lhs_design <- lhsDesign(n = num_points, factors = num_factors)
# Generar el diseño de mezclas usando Latin Hypercube Sampling (LHS)
lhs_design <- lhs::randomLHS(n = num_points, k = num_factors, rngkind = "default")
# Generar el diseño de mezclas usando Latin Hypercube Sampling (LHS)
lhs_design <- lhs::randomLHS(n = num_points, k = num_factors)
# Escalar los valores al rango de 0 a 100 para representar porcentaje
scaled_design <- lhs_design * 100
# Agregar etiquetas a las columnas para identificar los solventes acuosos y orgánicos
colnames(scaled_design) <- c("Solvente Acuoso (%)", "Solvente Orgánico (%)")
# Visualización del diseño generado en porcentaje
print(scaled_design)
# Generar el diseño de mezclas usando Latin Hypercube Sampling (LHS)
lhs_design <- lhs::randomLHS(n = num_points, k = num_factors)
# Escalar los valores para que sumen 100% en cada fila
scaled_design <- lhs_design / rowSums(lhs_design) * 100
# Agregar etiquetas a las columnas para identificar los solventes acuosos y orgánicos
colnames(scaled_design) <- c("Solvente Acuoso (%)", "Solvente Orgánico (%)")
# Visualización del diseño generado en porcentaje
print(scaled_design)
# Número de rampas de solventes que deseas
num_rampas <- 3
# Número de puntos en el diseño de mezclas por cada rampa
num_points_por_rampa <- 5
# Función para generar una rampa de solventes
generar_rampa <- function() {
rampa <- lhs::randomLHS(n = num_points_por_rampa, k = num_factors)
rampa <- rampa / rowSums(rampa) * 100
return(rampa)
}
# Generar el diseño de mezclas con múltiples rampas
rampas_design <- do.call(rbind, replicate(num_rampas, generar_rampa(), simplify = FALSE))
# Agregar etiquetas a las columnas para identificar los solventes acuosos y orgánicos
colnames(rampas_design) <- c("Solvente Acuoso (%)", "Solvente Orgánico (%)")
# Visualización del diseño generado en porcentaje
print(rampas_design)
View(rampas_design)
# Función para generar una rampa de solventes
generar_rampa <- function() {
rampa <- lhs::randomLHS(n = num_points_por_rampa, k = num_factors)
rampa <- rampa / rowSums(rampa) * 100
return(rampa)
}
View(generar_rampa)
View(rsm_design)
View(rampas_design)
# Función para generar una rampa de solventes
generar_rampa <- function() {
rampa <- lhs::randomLHS(n = num_points_por_rampa, k = num_factors)
rampa <- rampa / rowSums(rampa) * 100
return(rampa)
}
# Generar el diseño de mezclas con múltiples rampas
rampas_design <- replicate(num_rampas, generar_rampa())
# Agregar etiquetas a las columnas para identificar los solventes acuosos y orgánicos
colnames(rampas_design) <- c("Solvente Acuoso (%)", "Solvente Orgánico (%)")
# Visualización del diseño generado en porcentaje
print(rampas_design)
install.packages("quarto")
1 + 1
1 + 1
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
datos <- data.frame(Sector = c("Suministro de electricidad y agua", "Acuicultura y pesca de camarón", "Alojamiento y servicios de comida", "Pesca", "Transporte", "Comercio"),
Porcentaje = c(0.269, 0.222, 0.194, 0.118, 0.108, 0.102))
View(datos)
datos <- data.frame(Sector = c("Suministro de electricidad y agua", "Acuicultura y pesca de camarón", "Alojamiento y servicios de comida", "Pesca", "Transporte", "Comercio"),
Porcentaje = c(0.269, 0.222, 0.194, 0.118, 0.108, 0.102))
p <- ggplot(datos, aes(x="", y=Porcentaje, fill=Sector))
View(p)
View(p)
datos <- data.frame(Sector = c("Suministro de electricidad y agua", "Acuicultura y pesca de camarón", "Alojamiento y servicios de comida", "Pesca", "Transporte", "Comercio"),
Porcentaje = c(0.269, 0.222, 0.194, 0.118, 0.108, 0.102))
p <- ggplot(datos, aes(x="", y=Porcentaje, fill=Sector))
geom_bar(width = 1, stat = "identity")
coord_polar("y", start=0) +
scale_fill_brewer(palette = "Paired") +
ggtitle("Distribución del PIB por sector") +
xlab("") +
ylab("Porcentaje") +
theme_void() +
geom_text(aes(label=paste(round(100 * Porcentaje, 2), "%")),
position = position_stack(vjust = 0.5)) +
theme(plot.title = element_text(hjust = 0.5,
face = "bold",
family = "Times New Roman"))
coord_polar("y", start=0) +
scale_fill_brewer(palette = "Paired") +
ggtitle("Distribución del PIB por sector") +
xlab("") +
ylab("Porcentaje") +
theme_void() +
geom_text(aes(label=paste(round(100 * Porcentaje, 2), "%")),
position = position_stack(vjust = 0.5)) +
theme(plot.title = element_text(hjust = 0.5,
face = "bold",
family = "Times New Roman"))
rlang::last_trace()
rlang::last_trace(drop = FALSE)
coord_polar("y", start=0) +
scale_fill_brewer(palette = "Paired") +
ggtitle("Distribución del PIB por sector") +
xlab("") +
ylab("Porcentaje") +
theme_void() +
geom_text(aes(label=paste(round(100 * Porcentaje, 2), "%")),
position = position_stack(vjust = 0.5)) +
theme(plot.title = element_text(hjust = 0.5,
face = "bold",
family = "Times New Roman"))
rlang::last_trace()
rlang::last_trace(drop = FALSE)
# Instalar y cargar las librerías necesarias
install.packages(c("ggplot2", "cowplot"))
install.packages(c("ggplot2", "cowplot"))
install.packages(c("ggplot2", "cowplot"))
install.packages(c("ggplot2", "cowplot"))
install.packages(c("ggplot2", "cowplot"))
install.packages(c("ggplot2", "cowplot"))
library(ggplot2)
# Instalar y cargar las librerías necesarias
install.packages(c("ggplot2", "cowplot"))
install.packages(c("ggplot2", "cowplot"))
install.packages(c("ggplot2", "cowplot"))
# Instalar y cargar las librerías necesarias
install.packages(c("ggplot2", "cowplot"))
install.packages("ggplot2")
# Instalar y cargar las librerías necesarias
install.packages(c("ggplot2", "cowplot"))
library(ggplot2)
library(cowplot)
install.packages("ggplot2")
setwd("C:/Users/Usuario/Documents/Salesiana")
install.packages("cowplot")
